---
description: 
globs: 
alwaysApply: false
---
# General Debugging and Troubleshooting Rules

## Required Questions Before Implementation
1. "Does this component have its own state management API?"
2. "Am I fighting the component's design or working with it?"
3. "What does the official documentation say about controlling this?"
4. "Is this really complex enough to need a state machine?"
5. "What's the simplest way the component is meant to be used?"

## Debugging Process Rules
1. **Read the error/behavior literally** - "flashing" = state conflict
2. **Check component API documentation** before custom solutions
3. **Verify controlled vs uncontrolled patterns** in third-party libs
4. **Ask "What does the component expect?"** not "How can I force it?"
5. **Simplify first, then add complexity** if truly needed

## Documentation-First Approach
1. **When user provides documentation links**, carefully examine the actual examples and file structures shown, not just the explanatory text
2. **Always cross-reference existing code against official documentation** rather than assuming existing code is correct
3. **Pay attention to naming conventions** in documentation examples as they are often critical
4. **Start with the simplest possible explanation** before diving into complex troubleshooting

## Systematic Debugging Order
When troubleshooting any issue:
1. **File/folder structure and naming conventions**
2. **Basic configuration and setup**
3. **Simple syntax and import issues**
4. **Environment variables and dependencies**
5. **Framework-specific conventions**
6. **Complex business logic**

## Common Debugging Mistakes to Avoid
- Assuming existing code follows best practices without verification
- Jumping to complex solutions before checking simple issues
- Ignoring file naming conventions shown in documentation
- Not reading documentation examples carefully when provided by user
- Making changes without understanding the root cause
- Focusing on advanced features before ensuring basics work

## When User Provides Documentation
- **Read the examples thoroughly** - file names, directory structures, code patterns
- **Compare existing code against documentation standards**
- **Look for discrepancies in naming conventions first**
- **Ask clarifying questions if documentation contradicts existing code**

